// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "auth_service/internal/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TokensProvider is an autogenerated mock type for the TokensProvider type
type TokensProvider struct {
	mock.Mock
}

// GenerateTokensPair provides a mock function with given fields: ctx, inp
func (_m *TokensProvider) GenerateTokensPair(ctx context.Context, inp *dto.GenerateTokensPairInput) (*dto.GenerateTokensPairOutput, error) {
	ret := _m.Called(ctx, inp)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokensPair")
	}

	var r0 *dto.GenerateTokensPairOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GenerateTokensPairInput) (*dto.GenerateTokensPairOutput, error)); ok {
		return rf(ctx, inp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GenerateTokensPairInput) *dto.GenerateTokensPairOutput); ok {
		r0 = rf(ctx, inp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GenerateTokensPairOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GenerateTokensPairInput) error); ok {
		r1 = rf(ctx, inp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTokens provides a mock function with given fields: ctx, inp
func (_m *TokensProvider) UpdateTokens(ctx context.Context, inp *dto.UpdateTokensInput) (*dto.UpdateTokensOutput, error) {
	ret := _m.Called(ctx, inp)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTokens")
	}

	var r0 *dto.UpdateTokensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateTokensInput) (*dto.UpdateTokensOutput, error)); ok {
		return rf(ctx, inp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateTokensInput) *dto.UpdateTokensOutput); ok {
		r0 = rf(ctx, inp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UpdateTokensOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UpdateTokensInput) error); ok {
		r1 = rf(ctx, inp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokensProvider creates a new instance of TokensProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokensProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokensProvider {
	mock := &TokensProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
