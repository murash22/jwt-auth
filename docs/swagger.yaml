basePath: /
definitions:
  handlers.AuthResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: Ashyr
    url: https://t.me/nommstr
  description: Simple authorization service
  title: JWT Authorization service
paths:
  /auth/access:
    post:
      description: Endpoint to get tokens pair
      operationId: get-tokens
      parameters:
      - description: 'User guid. For example: ac798a7c-8244-414b-9f84-c8e4a61c13c0'
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      - text/plain
      responses:
        "200":
          description: Successful answer with tokens
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: In case if user_id wasn't provided or invalid guid
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: SignIn
      tags:
      - auth
  /auth/logout:
    post:
      description: Deletes refresh-token in db. Because of that, access_token will
        be valid until it expires (low TTL). And that's why protected routes will
        be accessible for a little time
      operationId: invalidate-tokens
      produces:
      - text/plain
      responses:
        "200":
          description: Successfully logged out (deleted refresh-token)
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Logout (deletes refresh token in db)
      tags:
      - auth
  /auth/me:
    get:
      description: Returns user's GUID
      operationId: token-subject
      produces:
      - text/plain
      responses:
        "200":
          description: Successfully logged out (deleted refresh-token)
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user's GUID
      tags:
      - auth
  /auth/refresh:
    post:
      description: Endpoint to update tokens pair. Expects Bearer in Authorization
        header and refresh-token in Cookie header. When testing in browser, once you
        update tokens, it is possible to update them with the same input refresh-token,
        but in fact browser automatically replaces cookies with the one sent from
        server
      operationId: update-tokens
      parameters:
      - description: Access token passed in Authorization header. For example 'Bearer
          paste-here-your-access-token'
        in: header
        name: Authorization
        required: true
        type: string
      - description: 'Refresh token passed in cookie header. For example: ''refresh-token=paste-here-your-refresh-token'''
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      - text/plain
      responses:
        "200":
          description: Successful answer with tokens
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: In case if invalid token
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: UpdateTokens
      tags:
      - auth
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'Authorization header with Bearer. For example: ''Bearer paste-here-your-token'''
    in: Header
    name: Authorization
    type: apiKey
swagger: "2.0"
